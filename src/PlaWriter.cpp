#include "PlaWriter.h"
#include <fstream>
#include <iostream>
#include <iomanip>

// Constructor
PlaWriter::PlaWriter(int num_vars, 
                     const std::vector<std::string>& var_names,
                     const std::string& out_name)
    : num_inputs(num_vars), input_names(var_names), output_name(out_name) {
}

// Set the minimal cover from Petrick's method
void PlaWriter::setMinimalCover(const std::vector<Implicant>& cover) {
    minimal_cover = cover;
}

// Convert implicant to PLA cube format
// The implicant value is already in the correct format (e.g., "-0-1")
std::string PlaWriter::implicantToCube(const Implicant& imp) const {
    return imp.value;
}

// Write minimized PLA to file
bool PlaWriter::write(const std::string& filename) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error: Cannot write to " << filename << std::endl;
        return false;
    }
    
    // Write PLA header
    file << "# Minimized Boolean Function\n";
    file << "# Generated by Quine-McCluskey + Petrick's Algorithm\n";
    file << "# Statistics:\n";
    file << "#   Product terms: " << getNumProductTerms() << "\n";
    file << "#   Total literals: " << getTotalLiterals() << "\n";
    file << "\n";
    
    // Write PLA format
    file << ".i " << num_inputs << "\n";
    file << ".o 1\n";
    
    // Write input variable names
    if (!input_names.empty()) {
        file << ".ilb";
        for (const auto& name : input_names) {
            file << " " << name;
        }
        file << "\n";
    }
    
    // Write output name
    file << ".ob " << output_name << "\n";
    
    // Write number of product terms
    file << ".p " << minimal_cover.size() << "\n";
    
    // Write each product term
    for (const auto& imp : minimal_cover) {
        file << implicantToCube(imp) << " 1\n";
    }
    
    // Write end marker
    file << ".e\n";
    
    file.close();
    return true;
}

// Get number of product terms
int PlaWriter::getNumProductTerms() const {
    return minimal_cover.size();
}

// Calculate total number of literals
int PlaWriter::getTotalLiterals() const {
    int count = 0;
    
    for (const auto& imp : minimal_cover) {
        // Count non-'-' characters (literals)
        for (char c : imp.value) {
            if (c != '-') {
                count++;
            }
        }
    }
    
    return count;
}
